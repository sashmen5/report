/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as AuthedYearRouteImport } from './routes/_authed/year.route'
import { Route as AuthedSeriesRouteImport } from './routes/_authed/series.route'
import { Route as AuthedSeasonsRouteImport } from './routes/_authed/seasons.route'
import { Route as AuthedSearchRouteImport } from './routes/_authed/search.route'
import { Route as AuthedMoviesRouteImport } from './routes/_authed/movies.route'
import { Route as AuthedSeasonsSerieIdRouteImport } from './routes/_authed/seasons/$serieId.route'

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedYearRouteRoute = AuthedYearRouteImport.update({
  id: '/year',
  path: '/year',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSeriesRouteRoute = AuthedSeriesRouteImport.update({
  id: '/series',
  path: '/series',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSeasonsRouteRoute = AuthedSeasonsRouteImport.update({
  id: '/seasons',
  path: '/seasons',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSearchRouteRoute = AuthedSearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedMoviesRouteRoute = AuthedMoviesRouteImport.update({
  id: '/movies',
  path: '/movies',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSeasonsSerieIdRouteRoute = AuthedSeasonsSerieIdRouteImport.update({
  id: '/$serieId',
  path: '/$serieId',
  getParentRoute: () => AuthedSeasonsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/movies': {
      id: '/_authed/movies'
      path: '/movies'
      fullPath: '/movies'
      preLoaderRoute: typeof AuthedMoviesRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/search': {
      id: '/_authed/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AuthedSearchRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/seasons': {
      id: '/_authed/seasons'
      path: '/seasons'
      fullPath: '/seasons'
      preLoaderRoute: typeof AuthedSeasonsRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/series': {
      id: '/_authed/series'
      path: '/series'
      fullPath: '/series'
      preLoaderRoute: typeof AuthedSeriesRouteImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/year': {
      id: '/_authed/year'
      path: '/year'
      fullPath: '/year'
      preLoaderRoute: typeof AuthedYearRouteImport
      parentRoute: typeof AuthedImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed/seasons/$serieId': {
      id: '/_authed/seasons/$serieId'
      path: '/$serieId'
      fullPath: '/seasons/$serieId'
      preLoaderRoute: typeof AuthedSeasonsSerieIdRouteImport
      parentRoute: typeof AuthedSeasonsRouteImport
    }
  }
}

// Create and export the route tree

interface AuthedSeasonsRouteRouteChildren {
  AuthedSeasonsSerieIdRouteRoute: typeof AuthedSeasonsSerieIdRouteRoute
}

const AuthedSeasonsRouteRouteChildren: AuthedSeasonsRouteRouteChildren = {
  AuthedSeasonsSerieIdRouteRoute: AuthedSeasonsSerieIdRouteRoute,
}

const AuthedSeasonsRouteRouteWithChildren =
  AuthedSeasonsRouteRoute._addFileChildren(AuthedSeasonsRouteRouteChildren)

interface AuthedRouteChildren {
  AuthedMoviesRouteRoute: typeof AuthedMoviesRouteRoute
  AuthedSearchRouteRoute: typeof AuthedSearchRouteRoute
  AuthedSeasonsRouteRoute: typeof AuthedSeasonsRouteRouteWithChildren
  AuthedSeriesRouteRoute: typeof AuthedSeriesRouteRoute
  AuthedYearRouteRoute: typeof AuthedYearRouteRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedMoviesRouteRoute: AuthedMoviesRouteRoute,
  AuthedSearchRouteRoute: AuthedSearchRouteRoute,
  AuthedSeasonsRouteRoute: AuthedSeasonsRouteRouteWithChildren,
  AuthedSeriesRouteRoute: AuthedSeriesRouteRoute,
  AuthedYearRouteRoute: AuthedYearRouteRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/movies': typeof AuthedMoviesRouteRoute
  '/search': typeof AuthedSearchRouteRoute
  '/seasons': typeof AuthedSeasonsRouteRouteWithChildren
  '/series': typeof AuthedSeriesRouteRoute
  '/year': typeof AuthedYearRouteRoute
  '/login': typeof LoginIndexRoute
  '/seasons/$serieId': typeof AuthedSeasonsSerieIdRouteRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/movies': typeof AuthedMoviesRouteRoute
  '/search': typeof AuthedSearchRouteRoute
  '/seasons': typeof AuthedSeasonsRouteRouteWithChildren
  '/series': typeof AuthedSeriesRouteRoute
  '/year': typeof AuthedYearRouteRoute
  '/login': typeof LoginIndexRoute
  '/seasons/$serieId': typeof AuthedSeasonsSerieIdRouteRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/movies': typeof AuthedMoviesRouteRoute
  '/_authed/search': typeof AuthedSearchRouteRoute
  '/_authed/seasons': typeof AuthedSeasonsRouteRouteWithChildren
  '/_authed/series': typeof AuthedSeriesRouteRoute
  '/_authed/year': typeof AuthedYearRouteRoute
  '/login/': typeof LoginIndexRoute
  '/_authed/seasons/$serieId': typeof AuthedSeasonsSerieIdRouteRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/movies'
    | '/search'
    | '/seasons'
    | '/series'
    | '/year'
    | '/login'
    | '/seasons/$serieId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/movies'
    | '/search'
    | '/seasons'
    | '/series'
    | '/year'
    | '/login'
    | '/seasons/$serieId'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/_authed/movies'
    | '/_authed/search'
    | '/_authed/seasons'
    | '/_authed/series'
    | '/_authed/year'
    | '/login/'
    | '/_authed/seasons/$serieId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginIndexRoute: typeof LoginIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginIndexRoute: LoginIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/movies",
        "/_authed/search",
        "/_authed/seasons",
        "/_authed/series",
        "/_authed/year"
      ]
    },
    "/_authed/movies": {
      "filePath": "_authed/movies.route.tsx",
      "parent": "/_authed"
    },
    "/_authed/search": {
      "filePath": "_authed/search.route.tsx",
      "parent": "/_authed"
    },
    "/_authed/seasons": {
      "filePath": "_authed/seasons.route.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/seasons/$serieId"
      ]
    },
    "/_authed/series": {
      "filePath": "_authed/series.route.tsx",
      "parent": "/_authed"
    },
    "/_authed/year": {
      "filePath": "_authed/year.route.tsx",
      "parent": "/_authed"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/_authed/seasons/$serieId": {
      "filePath": "_authed/seasons/$serieId.route.tsx",
      "parent": "/_authed/seasons"
    }
  }
}
ROUTE_MANIFEST_END */
